#!/bin/bash

# Function to print usage
print_usage() {
    echo "Usage: gnc [sitl|hil] {<any docker compose command>|help} [service@remote ...]"
    echo ""
    echo "Deployment modes:"
    echo "  sitl            Software-in-the-loop. Default mode if not provided."
    echo "  hil             Hardware-in-the-loop. (Note: HIL mode is currently unsupported by 'gnc')."
    echo ""
    echo "Examples:"
    echo "  gnc start"
    echo "  gnc logs gisnav"
    echo "  gnc start px4 gisnav@raspberrypi.local"
    echo "  gnc stop @raspberrypi.local"
}

# Function to manage tasks
manage_tasks() {
    local deployment_mode=$1
    shift 1

    # Handle submode
    case "$deployment_mode" in
        sitl)
            ;;
        hil)
            echo "WARNING: HIL mode is unsupported."
            exit 1
            ;;
        *)
            echo "Unknown mode: $deployment_mode"
            print_usage
            exit 1
            ;;
    esac

    # Initialize associative array for services and their remotes
    declare -A service_remotes

    while [ $# -gt 0 ]; do
        case "$1" in
            *@*)
                service="${1%@*}"
                remote="${1#*@}"
                service_remotes[$service]=$remote
                ;;
            *)
                if [ -z "$command" ]; then
                    command="$1"
                else
                    command_args+=("$1")
                fi
                ;;
        esac
        shift
    done

    # If no command provided, print usage
    if [ -z "$command" ]; then
        print_usage
        exit 1
    fi

    # Execute command for each service and its remote
    for service in "${!service_remotes[@]}"; do
        remote=${service_remotes[$service]}
        echo "Executing '$command' for service '$service' on remote '$remote'"
        ssh "$remote" "gnc $deployment_mode $command $service ${command_args[*]}"
    done

    # Handle default script execution if no specific service@remote provided
    if [ ${#service_remotes[@]} -eq 0 ]; then
        case "$command" in
            build)
                # Custom handling for building images on resource constrained systems
                /usr/lib/gisnav/build.sh "$command" "${command_args[@]}"
                ;;
            create)
                # Custom handling for creating images to enable GUI apps
                /usr/lib/gisnav/create.sh "$command" "${command_args[@]}"
                ;;
            help)
                print_usage
                ;;
            *)
                # Default script
                /usr/lib/gisnav/compose.sh "$command" "${command_args[@]}"
                ;;
        esac
    fi
}

# Check if enough arguments are provided
if [ $# -lt 1 ]; then
    print_usage
    exit 1
fi

# Determine default for deployment mode if not provided
deployment_mode="sitl"
command=""
declare -a command_args

if [ "$1" == "sitl" ] || [ "$1" == "hil" ]; then
    deployment_mode=$1
    shift
fi

# Manage tasks based on provided arguments
manage_tasks $deployment_mode "$@"
