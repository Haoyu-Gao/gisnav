#!/bin/bash

# Function to print usage
print_usage() {
    echo "Usage: gnc [sitl|hil] {<any docker compose command>|help} service[@remote] ..."
    echo ""
    echo "Deployment modes:"
    echo "  sitl            Software-in-the-loop. Default mode if not provided."
    echo "  hil             Hardware-in-the-loop. (Note: HIL mode is currently unsupported by 'gnc')."
    echo ""
    echo "Examples:"
    echo "  gnc start"
    echo "  gnc logs gisnav"
    echo "  gnc start px4 gisnav@raspberrypi.local"
    echo "  gnc stop @raspberrypi.local"
}

# Function to manage tasks
manage_tasks() {
    local deployment_mode=$1
    shift 1

    # Handle submode
    case "$deployment_mode" in
        sitl)
            ;;
        hil)
            echo "WARNING: HIL mode is unsupported."
            exit 1
            ;;
        *)
            echo "Unknown mode: $deployment_mode"
            print_usage
            exit 1
            ;;
    esac

    # Initialize associative array for remotes and their services
    declare -A remote_services
    BLANK_SERVICE=" "  # Variable for blank space service
    command=""
    command_args=()

    while [ $# -gt 0 ]; do
        case "$1" in
            *@localhost|*@127.0.0.1)
                service="${1%@*}"
                # If service is empty, replace it with a blank space
                if [ -z "$service" ]; then
                    service="$BLANK_SERVICE"
                fi
                if [ -z $local_services ]; then
                    local_services="$service"
                else
                    local_services+=" $service"
                fi
                ;;
            *@*)
                service="${1%@*}"
                # If service is empty, replace it with a blank space
                if [ -z "$service" ]; then
                    service="$BLANK_SERVICE"
                fi
                remote="${1#*@}"
                if [ -z "${remote_services[$remote]}" ]; then
                    remote_services[$remote]="$service"
                else
                    remote_services[$remote]+=" $service"
                fi
                ;;
            *)
                if [ -z "$command" ]; then
                    # we need and expect the command to be the first arg
                    command="$1"
                elif [[ "$1" == -* || "$1" == --* ]]; then
                    command_args+=("$1")
                else
                    service="$1"
                    #service="${1%@*}"
                    # If service is empty, replace it with a blank space
                    if [ -z "$service" ]; then
                        service="$BLANK_SERVICE"
                    fi
                    if [ -z $local_services ]; then
                        local_services="$service"
                    else
                        local_services+=" $service"
                    fi
                fi
                ;;
        esac
        shift
    done

    # If no command provided, print usage
    if [ -z "$command" ]; then
        print_usage
        exit 1
    fi

    # Execute command for each remote and its services
    for remote in "${!remote_services[@]}"; do
        services=${remote_services[$remote]}
        if [[ "$services" == *"$BLANK_SERVICE"* ]]; then
            echo "Executing '$command' on remote '$remote'"
            ssh "$remote" "gnc $deployment_mode $command ${command_args[*]}"
        else
            echo "Executing '$command' for services '$services' on remote '$remote'"
            ssh "$remote" "gnc $deployment_mode $command $services ${command_args[*]}"
        fi
    done

    # Handle command for local services. Either we have collected local services
    # earlier (gnc start px4, gnc start px4 gisnav@raspberrypi.local) and it's not empty,
    # or both remote services and local services are empty (gnc start)
    if [ ! -z "$local_services" ] || ( [ -z "$local_services" ] && [ ! ${#remote_services[@]} -gt 0 ] ); then
        case "$command" in
            build)
                # Custom handling for building images on resource constrained systems
                /usr/lib/gisnav/build.sh "$command" "${command_args[@]}" $local_services
                ;;
            create)
                # Custom handling for creating images to enable GUI apps
                /usr/lib/gisnav/create.sh "$command" "${command_args[@]}" $local_services
                ;;
            help)
                print_usage
                ;;
            *)
                # Default script
                /usr/lib/gisnav/compose.sh "$command" "${command_args[@]}" $local_services
                ;;
        esac
    fi

}

# Check if enough arguments are provided
if [ $# -lt 1 ]; then
    print_usage
    exit 1
fi

# Determine default for deployment mode if not provided
deployment_mode="sitl"
command=""
declare -a command_args

if [ "$1" == "sitl" ] || [ "$1" == "hil" ]; then
    deployment_mode=$1
    shift
fi

# Manage tasks based on provided arguments
manage_tasks $deployment_mode "$@"
