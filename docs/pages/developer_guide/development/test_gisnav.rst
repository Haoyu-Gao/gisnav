Test GISNav
____________________________________________________

This section describes how you run some of the test suites included with GISNav.
The instructions here are useful mainly if you are doing development work on
GISNav.

Prerequisites
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The prerequisites depend on whether you are running the tests for a local
installation or on a Docker container:

.. tab-set::

    .. tab-item:: Local
        :selected:

        .. include:: ../_shared/prerequisites/install_locally.rst

    .. tab-item:: Docker

        .. include:: ../_shared/prerequisites/gisnav.rst

        .. include:: ../_shared/prerequisites/build_or_pull_gisnav_docker.rst

Static analysis
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Static analysis runs the pre-commit configuration in the repository root
directory on all files, not just the ones staged for commit:

.. tab-set::

    .. tab-item:: Local
        :selected:

        .. code-block:: bash
            :caption: Run static analysis

            cd ~/colcon_ws/src/gisnav
            make test-static

    .. tab-item:: Docker

        .. code-block:: bash
            :caption: Run static analysis

            cd ~/colcon_ws/src/gisnav/docker
            docker compose -p gisnav run gisnav make test-static

Launch tests
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Luanch tests using the `ROS launch_testing package
<https://index.ros.org/p/launch_testing/>`_ are provided for smoke testing
launch files for common launch configurations in the :py:mod:`test.launch`
package. They are quick tests  that would typically reveal basic issues with
the nodes, like a node not starting properly or crashing soon after startup.

.. tab-set::

    .. tab-item:: Local
        :selected:

        .. code-block:: bash
            :caption: Run launch tests

            cd ~/colcon_ws/src/gisnav
            make test-launch

    .. tab-item:: Docker

        .. code-block:: bash
            :caption: Run launch tests

            cd ~/colcon_ws/src/gisnav/docker
            docker compose -p gisnav run gisnav make test-launch

You can also try running only specific launch tests with commands like below:

.. code-block:: bash
    :caption: Run ROS specific launch tests

    cd ~/colcon_ws/src/gisnav
    launch_test src/gisnav/gisnav/test/launch/test_px4_launch.py


Unit tests
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. todo::
    Implement a basic set of unit tests that is useful

SITL tests
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The SITL tests are powerful automated test suites that simulate GISNav in an
end-to-end loop with the autopilot inside a simulated world with simulated but
realistic sensor data.

Additional prerequisites
****************************************************

SITL tests require a number of supporting services to successfully complete:

* You must have made the ``create-offboard-sitl-dev-px4`` Make target:

  .. code-block:: bash
      :caption: Create containers for supporting services

      cd ~/colcon_ws/src/gisnav/docker
      make build-offboard-sitl-dev-px4
      make create-offboard-sitl-dev-px4
      make expose-xhost

  .. seealso::
      For more information see :ref:`Building, creating and running services`

Run SITL tests
****************************************************

SITL tests are under the ``gisnav/test/sitl`` folder. Use the below ``make``
command to run the SITL test:

.. code-block:: bash

    cd ~/colcon_ws/src/gisnav/gisnav
    make test-sitl

.. note::
    The script assumes you have already built the services defined in the
    ``docker-compose.yaml`` file.

Flight Log Analysis
****************************************************

The flight log generated by the SITL test can be analyzed e.g. with the help of the example code snippets in the
Jupyter notebooks in the ``test/ulog_analysis`` folder. You must first start ``jupyter-notebook``:

.. code-block:: bash

    cd ~/colcon_ws/src/gisnav/gisnav/test/sitl/ulog_analysis
    jupyter-notebook

The notebook documents the analysis and displays the results. Download the example ULog files from Google Drive `here
<https://drive.google.com/drive/folders/1SmcOV11IJG4qL7Of77mpNICeiLP_9fH7?usp=sharing>`_.

Generate code coverage reports
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To generate and inspect code coverage you can use ``coverage.py``. See the
`official instructions <https://coverage.readthedocs.io/en/6.4.1/source.html>`_
on how to configure what source files to measure. Use the below command to run
and inspect a code coverage report for the launch tests for the PX4 launch
configuration:

.. code-block:: bash
    :caption: Run and inspect code coverage report

    cd ~/colcon_ws
    python3 -m coverage run --branch --include *gisnav* src/gisnav/gisnav/test/launch/test_px4_launch.py
    python3 -m coverage report
