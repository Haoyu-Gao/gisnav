version: "3.4"

networks:
  gis:
    driver: bridge
    attachable: true
  mavlink:
    driver: bridge
    attachable: true
  admin:
    driver: bridge
    attachable: true

x-mavlink-net: &mavlink-net
  networks:
    - mavlink

x-gis-net: &gis-net
  networks:
    - gis

x-admin-net: &admin-net
  networks:
    - gis
    - admin

x-all-net: &all-net
  networks:
    - mavlink
    - gis


# platforms is a sequence not a mapping so careful when merging
# with something that defines its own platforms
x-base: &base
  build:
    dockerfile: Dockerfile
  volumes:
    - /var/run/docker.sock:/var/run/docker.sock:ro  # read-only for safety - admin dashboard uses this

# devices is a sequence not a mapping so careful when merging
# with something that defines its own devices
x-nvidia-gpu: &nvidia-gpu
  deploy:
    resources:
      reservations:
        devices:
          - driver: nvidia
            count: 1
            capabilities: [ gpu ]

x-x11-environment: &x11-environment
  environment:
    QT_X11_NO_MITSHM: 1
    DISPLAY: ${DISPLAY}

x-x11-volumes: &x11-volumes
  volumes:
    - /tmp/.X11-unix:/tmp/.X11-unix:ro
    - /dev/dri:/dev/dri  # Needed at least by rviz

# volumes is a sequence not a mapping so careful when merging with something
# that defines its own volumes.
# This is split into sub-extensions because downloader needs the environment
# but also needs to extend volumes and YAML does not support merging sequences.
x-x11: &x11
  <<: [*x11-environment, *x11-volumes]

x-ros: &ros
  environment:
    ROS_DOMAIN_ID: 0
  volumes:
    - /dev/shm:/dev/shm

x-tty: &tty
  stdin_open: true
  tty: true

services:
  mapserver:
    <<: [*base, *gis-net]
    build:
      context: apache
      target: mapserver
    command: apache2ctl -D FOREGROUND
    volumes:
      - maps-volume:/etc/mapserver/maps  # TODO: make read only? copy files and have user delete duplicates from their own volume?
    labels:
        - homepage.group=System services
        - homepage.name=MapServer
        - homepage.description=MapServer GIS service

  micro-ros-agent:
    <<: [*base, *ros, *mavlink-net]
    build:
      context: micro-ros-agent
    command: udp4 -p 8888
    labels:
        - homepage.group=System services
        - homepage.name=micro-ROS agent
        - homepage.description=uORB to ROS (PX4) middleware

  mavros:
    <<: [*base, *ros, *mavlink-net]
    build:
      context: mavros
      target: mavros
      args:
        ROS_VERSION: humble
    command: ros2 run mavros mavros_node --ros-args --param fcu_url:=udp://:14540@localhost:14557
    labels:
        - homepage.group=System services
        - homepage.name=MAVROS
        - homepage.description=MAVLink to ROS middleware

  qgc:
    <<: [*base, *x11, *mavlink-net]
    build:
      context: qgc
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix:ro
      - /dev/shm:/dev/shm
      - /dev/dri:/dev/dri
      - /var/run/docker.sock:/var/run/docker.sock:ro
    privileged: true

  # Note: build context is repository root
  # Note 2: The "docker buildx build" command in the push_gisnav_images.yml workflow
  #  duplicates these build arguments. They should be changed together.
  # *x11 anchor is needed for debugging (cv2 visualization of matches) for this
  # service
  gisnav:
    <<: [*base, *x11, *ros, *tty, *nvidia-gpu, *all-net]
    #image: "ghcr.io/hmakelin/gisnav:${TAG:-latest}"
    image: ghcr.io/hmakelin/gisnav:latest
    build:
      context: ..
      dockerfile: docker/mavros/Dockerfile
      target: gisnav
      args:
        ROS_VERSION: humble
    command: ros2 launch gisnav px4.dev.launch.py
    depends_on:
      - px4
      - mavros
      - micro-ros-agent
      - gscam
      - mapserver
    labels:
        - homepage.group=System services
        - homepage.name=GISNav
        - homepage.description=Generates mock GPS messages for FCU using visual map-based navigation

  # The px4 service depends on mavros, mapserver and micro-ros-agent because
  # their IP addresses are used in the px4 service entrypoint.sh script
  px4:
    <<: [*base, *x11, *tty, *nvidia-gpu, *mavlink-net]
    build:
      context: px4
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix:ro
      - /dev/shm:/dev/shm
      - /dev/dri:/dev/dri
    command: make px4_sitl gazebo-classic_typhoon_h480__ksql_airport
    depends_on:
      - mavros
      - micro-ros-agent
      - qgc

  ardupilot:
    <<: [*base, *x11, *nvidia-gpu, *mavlink-net]
    build:
      context: ardupilot
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix:ro
      - /dev/shm:/dev/shm
      - /dev/dri:/dev/dri
    privileged: True
    command: bash -c "cd ~ && make sim_vehicle"

  rviz:
    <<: [*base, *x11, *ros, *nvidia-gpu, *mavlink-net]
    build:
      context: rviz
      args:
        ROS_VERSION: humble
    command: rviz2 -d gisnav_config.rviz

  gscam:
    <<: [*base, *ros, *mavlink-net]
    build:
      context: gscam
      args:
        ROS_VERSION: humble
    command:
      - "ros2"
      - "run"
      - "gscam"
      - "gscam_node"
      - "--ros-args"
      - "--params-file"
      - "gscam_params.yaml"
      - "-p"
      - "camera_info_url:=file:///camera_calibration.yaml"
    labels:
        - homepage.group=System services
        - homepage.name=gscam
        - homepage.description=GStreamer camera middleware

  autoheal:
    <<: [*base, *all-net]
    image: willfarrell/autoheal
    restart: always
    environment:
      AUTOHEAL_CONTAINER_LABEL: all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
        - homepage.group=System services
        - homepage.name=Autoheal
        - homepage.description=Monitors and maintains health of other system services.

  qgis:
    <<: [*base, *x11, *gis-net]
    build:
      context: qgis
    command: qgis
    depends_on:
      - postgres
      - mapserver

  postgres:
    <<: [*base, *gis-net]
    build:
      context: postgres
    environment:
      POSTGRES_DB: gisnav
      POSTGRES_USER: gisnav
      POSTGRES_PASSWORD: gisnav
    labels:
        - homepage.group=System services
        - homepage.name=Postgres
        - homepage.description=PostGIS relational database for efficiently storing geographical information

  # todo: open web browser from homepage service, not from here
  fileserver:
    <<: [*base, *x11-environment, *nvidia-gpu, *gis-net]
    build:
      context: apache
      target: fileserver
    command: firefox "http://gisnav-homepage-1:3000"
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix # TODO: merge x-11-volumes?
      - maps-volume:/var/www/filegator/repository
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
        - homepage.group=Configuration
        - homepage.name=FileGator
        - homepage.description=File manager for uploading and removing orthoimagery and DEMs and editing ROS configuration files.
        - homepage.href=http://gisnav-fileserver-1

  # Give this thing access to all networks to see docker container status?
  homepage:
    <<: [*base, *x11-environment, *nvidia-gpu, *admin-net]
    build:
      context: homepage
    labels:
        - homepage.group=System services
        - homepage.name=Homepage
        - homepage.description=Administration dashboard
    depends_on:
      - fileserver  # depends on fileserver bc currently fileserver opens the web browser

volumes:
  maps-volume:
