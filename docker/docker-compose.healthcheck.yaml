# This file contains healthcheck definitions for the Compose services
# For ROS topic related checks, see ROS topography diagram.
# For networking related checks, see system architecture diagram.
# TODO: many hard coded ROS topic names here - remapping will break health checks

x-settings: &settings
  interval: 30s
  timeout: 10s
  retries: 3

services:
  gscam:
    healthcheck:
      test: ["CMD", "bash", "-c", "
          source /opt/ros/$ROS_DISTRO/setup.bash &&
          timeout 3 ros2 topic echo --once camera/image_raw > /dev/null 2>&1 &&
          timeout 3 ros2 topic echo --once camera/camera_info > /dev/null 2>&1"

        ]
      <<: *settings

  mavros:
    healthcheck:
      test: ["CMD", "bash", "-c", "
        source /opt/ros/$ROS_DISTRO/setup.bash &&
        source install/setup.bash &&
        timeout 30 ros2 topic echo --once mavros/global_position/global > /dev/null 2>&1 &&
        timeout 3 ros2 topic echo --once mavros/local_position/pose > /dev/null 2>&1 &&
        timeout 3 ros2 topic echo --once mavros/gimbal_control/device/attitude_status > /dev/null 2>&1"
      ]
      <<: *settings

  micro-ros-agent:
    healthcheck:
      test: ["CMD", "bash", "-c", "
        timeout 30 tcpdump -i any -c 1 udp src port ${UXRCE_DDS_PRT:?empty or not set} > /tmp/udp_check.log 2>&1 &&
        grep -q 'UDP' /tmp/udp_check.log"
      ]
      <<: *settings

  gisnav:
    healthcheck:
      test: ["CMD", "bash", "-c", "
        source /opt/ros/$ROS_DISTRO/setup.bash &&
        source /opt/colcon_ws/install/setup.bash &&
        timeout 30 ros2 topic echo --once /fmu/in/sensor_gps > /dev/null 2>&1"
      ]
      <<: *settings

  mapserver:
    healthcheck:
      test: ["CMD", "sh", "-c", "wget -q --spider http://localhost/cgi-bin/mapserv.cgi?map=/etc/mapserver/default.map&SERVICE=WMS&REQUEST=GetCapabilities"]
      <<: *settings

  nginx:
    healthcheck:
      test: ["CMD", "curl", "-s", "-o", "/dev/null", "-w", "%{http_code}", "http://localhost"]
      <<: *settings

  monitoring:
    healthcheck:
      test: ["CMD", "curl", "-s", "-o", "/dev/null", "-w", "%{http_code}", "http://localhost:61208"]
      <<: *settings

  fileserver:
    healthcheck:
      test: ["CMD", "sh", "-c", "wget -q --spider http://localhost:80"]
      <<: *settings

  homepage:
    healthcheck:
      test: ["CMD", "sh", "-c", "wget -q --spider http://localhost:3000"]
      <<: *settings

  postgres:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${GISNAV_DB} -h localhost &&
        psql -U ${POSTGRES_USER} -d ${GISNAV_DB} -c 'SELECT postgis_version();' &&
        psql -U ${POSTGRES_USER} -d ${GISNAV_DB} -c \"SELECT 1 FROM information_schema.tables WHERE table_schema = 'feature' LIMIT 1\""]
      <<: *settings
